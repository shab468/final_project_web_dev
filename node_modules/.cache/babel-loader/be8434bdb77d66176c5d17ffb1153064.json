{"ast":null,"code":"var _jsxFileName = \"/Users/shabnamdin/final_project_web_dev/src/components/containers/NewStudentContainer.js\";\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault();\n\n      // Basic validation\n      const {\n        firstname,\n        lastname,\n        campusId\n      } = this.state;\n      if (!firstname.trim() || !lastname.trim()) {\n        alert(\"First name and last name are required.\");\n        return;\n      }\n      const student = {\n        firstname,\n        lastname,\n        campusId: campusId ? Number(campusId) : null\n      };\n\n      // Add student to database\n      const newStudent = await this.props.addStudent(student);\n\n      // Redirect to student detail page\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        campusId: null,\n        redirect: true,\n        redirectId: newStudent.id\n      });\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      campusId: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","jsxDEV","_jsxDEV","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","firstname","lastname","campusId","state","trim","alert","student","Number","newStudent","addStudent","redirect","redirectId","id","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","mapDispatch","dispatch"],"sources":["/Users/shabnamdin/final_project_web_dev/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\", \n      campusId: null, \n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n  \n    // Basic validation\n    const { firstname, lastname, campusId } = this.state;\n    if (!firstname.trim() || !lastname.trim()) {\n      alert(\"First name and last name are required.\");\n      return;\n    }\n  \n    const student = {\n      firstname,\n      lastname,\n      campusId: campusId ? Number(campusId) : null\n    };\n  \n    // Add student to database\n    const newStudent = await this.props.addStudent(student);\n  \n    // Redirect to student detail page\n    this.setState({\n      firstname: \"\",\n      lastname: \"\",\n      campusId: null,\n      redirect: true,\n      redirectId: newStudent.id\n    });\n  };\n  \n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addStudent: (student) => dispatch(addStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}